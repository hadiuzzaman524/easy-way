// Mocks generated by Mockito 5.4.6 from annotations
// in easy_way/test/helper/mock_services.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i9;

import 'package:easy_way/data/data_sources/user_preferences_local_data_source.dart'
    as _i10;
import 'package:easy_way/domain/entities/route_info.dart' as _i7;
import 'package:easy_way/domain/services/car_connect_services.dart' as _i2;
import 'package:easy_way/domain/services/user_preferences_service.dart' as _i5;
import 'package:easy_way/domain/usecases/get_language_usecase.dart' as _i14;
import 'package:easy_way/domain/usecases/get_route_usecase.dart' as _i8;
import 'package:easy_way/domain/usecases/get_theme_mode_usecase.dart' as _i12;
import 'package:easy_way/domain/usecases/set_language_usecase.dart' as _i15;
import 'package:easy_way/domain/usecases/set_theme_mode_usecase.dart' as _i13;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i3;
import 'package:hive/hive.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCarConnectServices_0 extends _i1.SmartFake
    implements _i2.CarConnectServices {
  _FakeCarConnectServices_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLngBounds_1 extends _i1.SmartFake implements _i3.LatLngBounds {
  _FakeLatLngBounds_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScreenCoordinate_2 extends _i1.SmartFake
    implements _i3.ScreenCoordinate {
  _FakeScreenCoordinate_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_3 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBox_4<E> extends _i1.SmartFake implements _i4.Box<E> {
  _FakeBox_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserPreferences_5 extends _i1.SmartFake
    implements _i5.UserPreferences {
  _FakeUserPreferences_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CarConnectServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarConnectServices extends _i1.Mock
    implements _i2.CarConnectServices {
  MockCarConnectServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i7.RouteInfo?> getRoute(
    _i3.LatLng? origin,
    _i3.LatLng? destination,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoute, [origin, destination]),
            returnValue: _i6.Future<_i7.RouteInfo?>.value(),
          )
          as _i6.Future<_i7.RouteInfo?>);
}

/// A class which mocks [GetRouteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRouteUseCase extends _i1.Mock implements _i8.GetRouteUseCase {
  MockGetRouteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarConnectServices get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCarConnectServices_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CarConnectServices);

  @override
  _i6.Future<_i7.RouteInfo?> execute(
    _i3.LatLng? origin,
    _i3.LatLng? destination,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [origin, destination]),
            returnValue: _i6.Future<_i7.RouteInfo?>.value(),
          )
          as _i6.Future<_i7.RouteInfo?>);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i3.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);

  @override
  _i6.Future<void> clearTileCache(_i3.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTileCache, [tileOverlayId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> animateCamera(
    _i3.CameraUpdate? cameraUpdate, {
    Duration? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #animateCamera,
              [cameraUpdate],
              {#duration: duration},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> moveCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#moveCamera, [cameraUpdate]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(
            Invocation.method(#setMapStyle, [mapStyle]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> getStyleError() =>
      (super.noSuchMethod(
            Invocation.method(#getStyleError, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<_i3.LatLngBounds> getVisibleRegion() =>
      (super.noSuchMethod(
            Invocation.method(#getVisibleRegion, []),
            returnValue: _i6.Future<_i3.LatLngBounds>.value(
              _FakeLatLngBounds_1(
                this,
                Invocation.method(#getVisibleRegion, []),
              ),
            ),
          )
          as _i6.Future<_i3.LatLngBounds>);

  @override
  _i6.Future<_i3.ScreenCoordinate> getScreenCoordinate(_i3.LatLng? latLng) =>
      (super.noSuchMethod(
            Invocation.method(#getScreenCoordinate, [latLng]),
            returnValue: _i6.Future<_i3.ScreenCoordinate>.value(
              _FakeScreenCoordinate_2(
                this,
                Invocation.method(#getScreenCoordinate, [latLng]),
              ),
            ),
          )
          as _i6.Future<_i3.ScreenCoordinate>);

  @override
  _i6.Future<_i3.LatLng> getLatLng(_i3.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(
            Invocation.method(#getLatLng, [screenCoordinate]),
            returnValue: _i6.Future<_i3.LatLng>.value(
              _FakeLatLng_3(
                this,
                Invocation.method(#getLatLng, [screenCoordinate]),
              ),
            ),
          )
          as _i6.Future<_i3.LatLng>);

  @override
  _i6.Future<void> showMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#showMarkerInfoWindow, [markerId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> hideMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#hideMarkerInfoWindow, [markerId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isMarkerInfoWindowShown(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#isMarkerInfoWindowShown, [markerId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<double> getZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getZoomLevel, []),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<_i9.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(
            Invocation.method(#takeSnapshot, []),
            returnValue: _i6.Future<_i9.Uint8List?>.value(),
          )
          as _i6.Future<_i9.Uint8List?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferences extends _i1.Mock implements _i5.UserPreferences {
  MockUserPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> setDarkMode({required bool? isDarkMode}) =>
      (super.noSuchMethod(
            Invocation.method(#setDarkMode, [], {#isDarkMode: isDarkMode}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> getDarkMode() =>
      (super.noSuchMethod(
            Invocation.method(#getDarkMode, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setLanguage({required bool? isBangla}) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [], {#isBangla: isBangla}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> getLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#getLanguage, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [UserPreferencesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferencesLocalDataSource extends _i1.Mock
    implements _i10.UserPreferencesLocalDataSource {
  MockUserPreferencesLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Box<dynamic> get box =>
      (super.noSuchMethod(
            Invocation.getter(#box),
            returnValue: _FakeBox_4<dynamic>(this, Invocation.getter(#box)),
          )
          as _i4.Box<dynamic>);

  @override
  _i6.Future<void> setDarkMode({required bool? isDarkMode}) =>
      (super.noSuchMethod(
            Invocation.method(#setDarkMode, [], {#isDarkMode: isDarkMode}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> getDarkMode() =>
      (super.noSuchMethod(
            Invocation.method(#getDarkMode, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setLanguage({required bool? isBangla}) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [], {#isBangla: isBangla}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> getLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#getLanguage, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);

  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);

  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);

  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);

  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
            Invocation.method(#valuesBetween, [], {
              #startKey: startKey,
              #endKey: endKey,
            }),
            returnValue: <E>[],
          )
          as Iterable<E>);

  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);

  @override
  Map<dynamic, E> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <dynamic, E>{},
          )
          as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));

  @override
  _i6.Stream<_i4.BoxEvent> watch({dynamic key}) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {#key: key}),
            returnValue: _i6.Stream<_i4.BoxEvent>.empty(),
          )
          as _i6.Stream<_i4.BoxEvent>);

  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(
            Invocation.method(#put, [key, value]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(
            Invocation.method(#putAt, [index, value]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(
            Invocation.method(#putAll, [entries]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> add(E? value) =>
      (super.noSuchMethod(
            Invocation.method(#add, [value]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(
            Invocation.method(#addAll, [values]),
            returnValue: _i6.Future<Iterable<int>>.value(<int>[]),
          )
          as _i6.Future<Iterable<int>>);

  @override
  _i6.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAt, [index]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [keys]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> compact() =>
      (super.noSuchMethod(
            Invocation.method(#compact, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromDisk, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [GetThemeModeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetThemeModeUseCase extends _i1.Mock
    implements _i12.GetThemeModeUseCase {
  MockGetThemeModeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserPreferences get userPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#userPreferences),
            returnValue: _FakeUserPreferences_5(
              this,
              Invocation.getter(#userPreferences),
            ),
          )
          as _i5.UserPreferences);

  @override
  _i6.Future<bool> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [SetThemeModeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetThemeModeUseCase extends _i1.Mock
    implements _i13.SetThemeModeUseCase {
  MockSetThemeModeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserPreferences get userPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#userPreferences),
            returnValue: _FakeUserPreferences_5(
              this,
              Invocation.getter(#userPreferences),
            ),
          )
          as _i5.UserPreferences);

  @override
  _i6.Future<void> execute({required bool? isDarkMode}) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#isDarkMode: isDarkMode}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [GetLanguageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLanguageUseCase extends _i1.Mock
    implements _i14.GetLanguageUseCase {
  MockGetLanguageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserPreferences get userPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#userPreferences),
            returnValue: _FakeUserPreferences_5(
              this,
              Invocation.getter(#userPreferences),
            ),
          )
          as _i5.UserPreferences);

  @override
  _i6.Future<bool> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [SetLanguageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetLanguageUseCase extends _i1.Mock
    implements _i15.SetLanguageUseCase {
  MockSetLanguageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserPreferences get userPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#userPreferences),
            returnValue: _FakeUserPreferences_5(
              this,
              Invocation.getter(#userPreferences),
            ),
          )
          as _i5.UserPreferences);

  @override
  _i6.Future<void> execute({required bool? isBangla}) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#isBangla: isBangla}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
